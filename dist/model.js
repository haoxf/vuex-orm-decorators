import { ORMDatabase } from './database';
/**
 * Creates an vuex-orm Model
 * @param entityName The name of the entity to be used as the key for the state
 */
export function OrmModel(entityName, typesPreregister, parentEntity, types, typeKey) {
    return function (constructor) {
        var model = constructor;
        // Set the entity name on the model constructor
        var target = constructor;
        target.entity = entityName;
        // Set the parent entity name on the model constructor (if present)
        if (parentEntity) {
            target.baseEntity = parentEntity;
        }
        // Setup the types and descriminator (if set)
        if (types) {
            target.types = function () { return types; };
        }
        if (types && typeKey) {
            target.typeKey = typeKey;
        }
        // Add the fields generated by tha attribute decorators
        target.fields = function () {
            var ret = {};
            var fields = target._fields || {};
            for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
                var k = _a[_i];
                var key = k;
                if (Object.prototype.hasOwnProperty.call(fields, key)) {
                    var creator = fields[key];
                    ret[key] = creator.apply(creator);
                }
            }
            for (var _b = 0, _c = Object.getOwnPropertySymbols(fields); _b < _c.length; _b++) {
                var k = _c[_b];
                var key = k;
                var creator = fields[key];
                ret[key] = creator.apply(creator);
            }
            return ret;
        };
        if (target._primaryKey && target._primaryKey.length > 0) {
            if (target._primaryKey.length > 1) {
                target.primaryKey = target._primaryKey;
                delete target._primaryKey;
            }
            else {
                target.primaryKey = target._primaryKey[0];
            }
        }
        if (typesPreregister) {
            var ret = typesPreregister.apply(typesPreregister);
            if (ret instanceof Array) {
                for (var _i = 0, ret_1 = ret; _i < ret_1.length; _i++) {
                    var item = ret_1[_i];
                    ORMDatabase.registerEntity(item);
                }
            }
            else if (ret) {
                ORMDatabase.registerEntity(ret);
            }
        }
        // Register the entity in the database
        ORMDatabase.registerEntity(constructor);
        return constructor;
    };
}
//# sourceMappingURL=model.js.map