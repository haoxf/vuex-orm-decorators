import { Attribute, Model } from '@vuex-orm/core'

import { ORMDatabase } from './database'

interface OrmModelLike {
  entity: string
  baseEntity?: string
  types?: () => { [key: string]: typeof Model }
  typeKey?: string
  fields: () => Record<string, Attribute>
  primaryKey?: string | string[]
  _primaryKey?: string[]
  _fields?: Record<string | symbol, () => Attribute>
}

/**
 * Creates an vuex-orm Model
 * @param entityName The name of the entity to be used as the key for the state
 */
export function OrmModel(
  entityName: string,
  parentEntity?: string,
  types?: () => { [key: string]: typeof Model },
  typeKey?: string
) {
  return function <Model extends Function>(constructor: Model): Model | void {
    const model: Function = constructor

    // Set the entity name on the model constructor
    const target = (constructor as any) as OrmModelLike
    target.entity = entityName

    // Set the parent entity name on the model constructor (if present)
    if (parentEntity) {
      target.baseEntity = parentEntity
    }

    // Setup the types and descriminator (if set)
    if (types) {
      target.types = types
    }
    if (types && typeKey) {
      target.typeKey = typeKey
    }

    // Add the fields generated by tha attribute decorators
    target.fields = () => {
      const ret: Record<string, Attribute> = {}
      const fields = target._fields || {}
      for (const k of Object.keys(fields)) {
        const key = k as string
        if (Object.prototype.hasOwnProperty.call(fields, key)) {
          const creator = fields[key]
          ret[key] = creator.apply(creator)
        }
      }
      for (const k of Object.getOwnPropertySymbols(fields)) {
        const key = (k as any) as string
        const creator = fields[key]
        ret[key] = creator.apply(creator)
      }
      return ret
    }

    if (target._primaryKey && target._primaryKey.length > 0) {
      if (target._primaryKey.length > 1) {
        target.primaryKey = target._primaryKey
        delete target._primaryKey
      } else {
        target.primaryKey = target._primaryKey[0]
      }
    }

    // Register the entity in the database
    ORMDatabase.registerEntity((constructor as unknown) as typeof Model)

    return constructor
  }
}
